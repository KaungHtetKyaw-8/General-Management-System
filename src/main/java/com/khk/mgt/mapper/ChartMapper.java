package com.khk.mgt.mapper;

import com.khk.mgt.dto.chart.*;
import com.khk.mgt.util.ColorUtil;

import java.util.*;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class ChartMapper {

    public static <T extends ChartDataDetail> ChartDto<T> toChartDto(
            List<LabelValue> source,
            String datasetLabel,
            Supplier<T> datasetSupplier
    ) {
        ChartDto<T> chartDto = new ChartDto<>();

        // Set labels from all LabelValue.label
        List<String> labels = source.stream()
                .map(LabelValue::getLabel)
                .collect(Collectors.toList());
        chartDto.setLabels(labels);

        // Create a dataset instance via supplier (can be ChartDataDetail or subclass)
        T dataset = datasetSupplier.get();
        dataset.setLabel(datasetLabel);

        // Set dataset values
        List<Long> values = source.stream()
                .map(LabelValue::getValue)
                .collect(Collectors.toList());
        dataset.setData(values);

        chartDto.getDatasets().add(dataset);

        return chartDto;
    }


    public static <T extends ChartDataDetail> ChartDto<T> toGroupedChartDto(
            List<GroupedLabelValue> source,
            Supplier<T> datasetSupplier
    ) {
        ChartDto<T> chartDto = new ChartDto<>();

        // Collect all unique labels (e.g., "20~30", "30~40")
        Set<String> uniqueLabels = source.stream()
                .map(GroupedLabelValue::getLabel)
                .collect(Collectors.toCollection(LinkedHashSet::new));

        chartDto.setLabels(new ArrayList<>(uniqueLabels));

        // Group values by dataset (e.g., "Male", "Female") → label → value
        Map<String, Map<String, Long>> groupedData = source.stream()
                .collect(Collectors.groupingBy(
                        GroupedLabelValue::getGroup,
                        Collectors.toMap(
                                GroupedLabelValue::getLabel,
                                GroupedLabelValue::getValue
//                                (a, b) -> b
                        )
                ));

        // Color generated by group.
        List<String> backgroundColors = ColorUtil.generateColorList(groupedData.size());
        int colorIndex = 0;

        // Convert to datasets
        for (Map.Entry<String, Map<String, Long>> entry : groupedData.entrySet()) {
            T dataset = datasetSupplier.get();
            dataset.setLabel(entry.getKey());


            List<Long> values = uniqueLabels.stream()
                    .map(label -> entry.getValue().getOrDefault(label, 0L))
                    .collect(Collectors.toList());

            if (dataset instanceof BarChartDataDetail){
                if (colorIndex < backgroundColors.size()) {
                    dataset.getBackgroundColor().add(backgroundColors.get(colorIndex) + "4C");
                    ((BarChartDataDetail) dataset).getBorderColor().add(backgroundColors.get(colorIndex));
                    ((BarChartDataDetail) dataset).setBorderWidth(1);
                }
            }

            dataset.setData(values);
            chartDto.getDatasets().add(dataset);

            colorIndex++;
        }

        return chartDto;
    }
}
